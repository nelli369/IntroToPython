Replacing list elements is pretty easy. Simply subset the list and assign new values to the subset. 
You can select single elements or you can change entire list slices at once.

Use the IPython Shell to experiment with the commands below. Can you tell what's happening and why?

x = ["a", "b", "c", "d"]
x[1] = "r"
x[2:] = ["s", "t"]
For this and the following exercises, you'll continue working on 
the areas list that contains the names and areas of different rooms in a house.

# Create the areas list
areas = ["hallway", 11.25, "kitchen", 18.0, "living room", 20.0, "bedroom", 10.75, "bathroom", 9.50]

# Correct the bathroom area
areas[9]=10.50

# Change "living room" to "chill zone"
areas[4]="chill zone"
print(areas)
____________________________________________________________________________________________

Extend a list
If you can change elements in a list, you sure want to 
be able to add elements to it, right? You can use the + operator:

x = ["a", "b", "c", "d"]
y = x + ["e", "f"]
You just won the lottery, awesome! You decide to build a poolhouse and a garage.
 Can you add the information to the areas list?

# Create the areas list and make some changes
areas = ["hallway", 11.25, "kitchen", 18.0, "chill zone", 20.0,
         "bedroom", 10.75, "bathroom", 10.50]

# Add poolhouse data to areas, new list is areas_1
areas_1= areas + ["poolhouse", 24.5]

# Add garage data to areas_1, new list is areas_2
areas_2 = areas_1 + ["garage", 15.45]

_____________________________________________________________________________________________
Delete list elements
Finally, you can also remove elements from your list. You can do this with the del statement:

x = ["a", "b", "c", "d"]
del(x[1])
Pay attention here: as soon as you remove an element from a list, the indexes of the elements 
that come after the deleted element all change!

The updated and extended version of areas that you've built in the previous exercises is coded below. 
You can copy and paste this into the IPython Shell to play around with the result.

areas = ["hallway", 11.25, "kitchen", 18.0,
        "chill zone", 20.0, "bedroom", 10.75,
         "bathroom", 10.50, "poolhouse", 24.5,
         "garage", 15.45]
There was a mistake! The amount you won with the lottery is
 not that big after all and it looks like the poolhouse isn't going to happen.
 You decide to remove the corresponding string and float from the areas list.

The ; sign is used to place commands on the same line. The following two code chunks are equivalent:

# Same line
command1; command2

# Separate lines
command1
command2
Which of the code chunks will do the job for us?

Instructions

Possible Answers
del(areas[10]); del(areas[11])
del(areas[10:11])
del(areas[-4:-2]) CORRECT!
del(areas[-3]); del(areas[-4])
_______________________________________________________________________________

Change the second command, that creates the variable areas_copy, such that areas_copy 
is an explicit copy of areas. After your edit, 
changes made to areas_copy shouldn't affect areas. 

# Create list areas
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Create areas_copy
areas_copy = list(areas)

# Change areas_copy
areas_copy[0] = 5.0

# Print areas
print(areas)

________________________________________________________________________________